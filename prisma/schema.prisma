
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Coupon {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  couponCode String
  expiryDate DateTime
  isActive   Boolean
 
}

model Banner {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
title String
link String
imageUrl String
isActive Boolean
 createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
   id       String    @id @default(auto()) @map("_id") @db.ObjectId
  title      String 
  slug       String @unique
  imageUrl  String?
  description String?   
  isActive   Boolean
  products  Product[] 
  trainings  Training[]  
  marketIds String[] @db.ObjectId
  markets   Market[]   @relation(fields: [marketIds], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Market {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug     String @unique
  logoUrl String
  description String
  isActive   Boolean
  categoryIds String[]   @db.ObjectId
  categories  Category[] @relation(fields: [categoryIds], references: [id])

createdAt   DateTime   @default(now())
  updatedAt   DateTime?  @updatedAt
}

model Product {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  slug           String   @unique
  imageUrl       String?
  // productImages  String[]
  description    String?
  isActive       Boolean
  // isWholesale    Boolean
  sku            String?
  barcode        String?
  // productCode    String?
  // unit           String?
  productPrice   Float
  salePrice      Float
  // wholesalePrice Float?
  // wholesaleQty   Int?
  // productStock   Int?
  // qty            Int?
  tags           String[]

    categoryIds String   @db.ObjectId
  categories  Category @relation(fields: [categoryIds], references: [id])
  
 user   User @relation(fields: [userId], references: [id])
  userId String  @db.ObjectId

  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
}




model Training{
     id          String     @id @default(auto()) @map("_id") @db.ObjectId
  title       String
      slug           String   @unique
  imageUrl       String?
   description    String?
  isActive       Boolean
      content String

        
  categories  Category @relation(fields: [categoryIds], references: [id])
  categoryIds String  @db.ObjectId

}

enum UserRole{
  ADMIN
  USER
  FARMER
  MODERATOR
}

model User {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String   @unique
  name    String?
  emailVerified DateTime?
 
   products Product[]
  role UserRole @default(USER)
  farmerProfile FarmerProfile?
	createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FarmerProfile {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  title       String
 
  code String
  contactPerson String?
  contactPersonPhone String?
   profileImageUrl String?
  email String
  name String
  notes String?
  phone String
  physicalAddress String?
  terms String?
  isActive Boolean

  user   User @relation(fields: [userId], references: [id])
  userId String @db.ObjectId  @unique
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
}

