generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Coupon {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  couponCode String
  expiryDate DateTime
  isActive   Boolean
}

model Banner {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  link       String
  imageUrl   String
  isActive   Boolean
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String    @unique
  imageUrl    String?
  description String?
  isActive    Boolean
  products    Product[]
  trainings   Training[]
  marketIds   String[]  @db.ObjectId
  markets     Market[]  @relation(fields: [marketIds], references: [id])

  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
}

model Market {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String     @unique
  logoUrl     String
  description String
  isActive    Boolean
  categoryIds String[]   @db.ObjectId
  categories  Category[] @relation(fields: [categoryIds], references: [id])

  createdAt   DateTime   @default(now())
  updatedAt   DateTime?  @updatedAt
}

model Product {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  slug          String    @unique
  imageUrl      String?
  description   String?
  isActive      Boolean
  isWholesale   Boolean
  sku           String?
  barcode       String?
  productCode   String?
  unit          String?
  productPrice  Float
  salePrice     Float
  wholesalePrice Float?
  wholesaleQty  Int?
  productStock  Int?
  qty           Int?
  tags          String[]
  categoryId    String    @db.ObjectId
  category      Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId        String    @db.ObjectId
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @updatedAt
}

model Training {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String     @unique
  imageUrl    String?
  description String?
  isActive    Boolean
  content     String
  categoryId  String     @db.ObjectId
  category    Category   @relation(fields: [categoryId], references: [id])
    createdAt           DateTime   @default(now())
  updatedAt           DateTime?  @updatedAt
}

enum UserRole {
  ADMIN
  USER
  FARMER
  MODERATOR
}

model User {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?       @unique
  password      String
  emailVerified DateTime?
  products      Product[]
  role          UserRole      @default(USER)
  farmerProfile FarmerProfile?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model FarmerProfile {
  id                  String     @id @default(auto()) @map("_id") @db.ObjectId
  code                String
  contactPerson       String?
  contactPersonPhone  String?
  profileImageUrl     String?
  email               String
  name                String
  notes               String?
  phone               String
  physicalAddress     String?
  terms               String?
  isActive            Boolean
  products            String[]
  landSize            Float
  mainCrop            String
  userId              String     @db.ObjectId  @unique
  user                User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt           DateTime   @default(now())
  updatedAt           DateTime?  @updatedAt
}
